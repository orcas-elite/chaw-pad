/**
 */
package anotherMicroserviceMetamodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import microserviceMetamodel.util.AnotherMicroserviceMetamodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AnotherMicroserviceMetamodelItemProviderAdapterFactory extends AnotherMicroserviceMetamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AnotherMicroserviceMetamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.Microservice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroserviceItemProvider microserviceItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.Microservice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroserviceAdapter() {
		if (microserviceItemProvider == null) {
			microserviceItemProvider = new MicroserviceItemProvider(this);
		}

		return microserviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.Version} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionItemProvider versionItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.Version}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionAdapter() {
		if (versionItemProvider == null) {
			versionItemProvider = new VersionItemProvider(this);
		}

		return versionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.Endpoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndpointItemProvider endpointItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.Endpoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndpointAdapter() {
		if (endpointItemProvider == null) {
			endpointItemProvider = new EndpointItemProvider(this);
		}

		return endpointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.RESTOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RESTOperationItemProvider restOperationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.RESTOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRESTOperationAdapter() {
		if (restOperationItemProvider == null) {
			restOperationItemProvider = new RESTOperationItemProvider(this);
		}

		return restOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.MicroserviceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroserviceTypeItemProvider microserviceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.MicroserviceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroserviceTypeAdapter() {
		if (microserviceTypeItemProvider == null) {
			microserviceTypeItemProvider = new MicroserviceTypeItemProvider(this);
		}

		return microserviceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.MicroserviceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroserviceRepositoryItemProvider microserviceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.MicroserviceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroserviceRepositoryAdapter() {
		if (microserviceRepositoryItemProvider == null) {
			microserviceRepositoryItemProvider = new MicroserviceRepositoryItemProvider(this);
		}

		return microserviceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.VirtualHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualHostItemProvider virtualHostItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.VirtualHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualHostAdapter() {
		if (virtualHostItemProvider == null) {
			virtualHostItemProvider = new VirtualHostItemProvider(this);
		}

		return virtualHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.PhysicalHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalHostItemProvider physicalHostItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.PhysicalHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalHostAdapter() {
		if (physicalHostItemProvider == null) {
			physicalHostItemProvider = new PhysicalHostItemProvider(this);
		}

		return physicalHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.InfrastructureModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureModelItemProvider infrastructureModelItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.InfrastructureModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureModelAdapter() {
		if (infrastructureModelItemProvider == null) {
			infrastructureModelItemProvider = new InfrastructureModelItemProvider(this);
		}

		return infrastructureModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.DependencyModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyModelItemProvider dependencyModelItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.DependencyModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyModelAdapter() {
		if (dependencyModelItemProvider == null) {
			dependencyModelItemProvider = new DependencyModelItemProvider(this);
		}

		return dependencyModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.OperationToOperationCallingDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationToOperationCallingDependencyItemProvider operationToOperationCallingDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.OperationToOperationCallingDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationToOperationCallingDependencyAdapter() {
		if (operationToOperationCallingDependencyItemProvider == null) {
			operationToOperationCallingDependencyItemProvider = new OperationToOperationCallingDependencyItemProvider(this);
		}

		return operationToOperationCallingDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.TimeSeries} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeSeriesItemProvider timeSeriesItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.TimeSeries}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeSeriesAdapter() {
		if (timeSeriesItemProvider == null) {
			timeSeriesItemProvider = new TimeSeriesItemProvider(this);
		}

		return timeSeriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.TimeSeriesPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeSeriesPointItemProvider timeSeriesPointItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.TimeSeriesPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeSeriesPointAdapter() {
		if (timeSeriesPointItemProvider == null) {
			timeSeriesPointItemProvider = new TimeSeriesPointItemProvider(this);
		}

		return timeSeriesPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.MicroserviceOperationTimeSeriesPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroserviceOperationTimeSeriesPointItemProvider microserviceOperationTimeSeriesPointItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.MicroserviceOperationTimeSeriesPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroserviceOperationTimeSeriesPointAdapter() {
		if (microserviceOperationTimeSeriesPointItemProvider == null) {
			microserviceOperationTimeSeriesPointItemProvider = new MicroserviceOperationTimeSeriesPointItemProvider(this);
		}

		return microserviceOperationTimeSeriesPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodel.MetaModelStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaModelStructureItemProvider metaModelStructureItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodel.MetaModelStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaModelStructureAdapter() {
		if (metaModelStructureItemProvider == null) {
			metaModelStructureItemProvider = new MetaModelStructureItemProvider(this);
		}

		return metaModelStructureItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (microserviceItemProvider != null) microserviceItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (versionItemProvider != null) versionItemProvider.dispose();
		if (endpointItemProvider != null) endpointItemProvider.dispose();
		if (restOperationItemProvider != null) restOperationItemProvider.dispose();
		if (microserviceTypeItemProvider != null) microserviceTypeItemProvider.dispose();
		if (microserviceRepositoryItemProvider != null) microserviceRepositoryItemProvider.dispose();
		if (virtualHostItemProvider != null) virtualHostItemProvider.dispose();
		if (physicalHostItemProvider != null) physicalHostItemProvider.dispose();
		if (infrastructureModelItemProvider != null) infrastructureModelItemProvider.dispose();
		if (dependencyModelItemProvider != null) dependencyModelItemProvider.dispose();
		if (operationToOperationCallingDependencyItemProvider != null) operationToOperationCallingDependencyItemProvider.dispose();
		if (timeSeriesItemProvider != null) timeSeriesItemProvider.dispose();
		if (timeSeriesPointItemProvider != null) timeSeriesPointItemProvider.dispose();
		if (microserviceOperationTimeSeriesPointItemProvider != null) microserviceOperationTimeSeriesPointItemProvider.dispose();
		if (metaModelStructureItemProvider != null) metaModelStructureItemProvider.dispose();
	}

}
